
#  Import necessary libraries

import requests
from bs4 import BeautifulSoup
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, LongTable
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import DataValues as dv

#  Define a function to export data as a PDF

def ExportPdf(input_cve):
    url = f"https://nvd.nist.gov/vuln/detail/CVE-{input_cve}"

    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        pdf_filename = f"CVE-{input_cve}_info.pdf"
        dv.pdf_file_name = pdf_filename
        doc = SimpleDocTemplate(pdf_filename, pagesize=letter)
        styles = getSampleStyleSheet()

        pdf_content = []
        logo_image = "logo.png"

        pdf_content.append(Spacer(width=1, height=1)) #buna baxarsan bosluq qoyur gor bosluqsuz nece olacaq
        pdf_content.append(Image(logo_image, width=500, height=100))

        #  Extract and format header information
        header = soup.find(attrs={"data-testid": "page-header-vuln-id"})
        if header:
            header = header.text.strip()
            pdf_content.append(Paragraph(f"<font size='16'><b>{header}</b></font>", styles["Normal"]))

         #  Extract and format publication date
        pub_date_element = soup.find("span", {"data-testid": "vuln-published-on"})
        if pub_date_element:
            pub_date_text = pub_date_element.text.strip()
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph(f"<b>Publication Date:</b> {pub_date_text}", styles["Normal"]))
        
        #  Extract and format CVSS score
        base_score = soup.find(attrs={"id": "Cvss3NistCalculatorAnchor"})
        if base_score:
            base_score = base_score.text.strip()
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph(f"<b>CVSS Score:</b> {base_score}", styles["Normal"]))

        #  Extract and format CVSS vector
        cvss_element = soup.find(attrs={"data-testid": "vuln-cvss3-nist-vector"})
        if cvss_element:
            cvss_text = cvss_element.text.strip()
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph(f"<b>CVSS Vector :</b> {cvss_text}", styles["Normal"]))


        #  Extract and format description
        description_element = soup.find("p", {"data-testid": "vuln-description"})
        if description_element:
            description_text = description_element.text.strip()
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph(f"<b>Description:</b> {description_text}", styles["Normal"]))

        #  Extract and format link table
        link_table = soup.find('table', {'data-testid': 'vuln-hyperlinks-table'})
        if link_table:
            table_data = []
            table_data.append(["Hyperlinks", "Resource"])
            
            for row in link_table.find_all('tr')[:5]:
                cell_data = [cell.text.strip() for cell in row.find_all('td')]
                table_data.append(cell_data)

            table = LongTable(table_data, colWidths=[200, 300], repeatRows=1)

            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.royalblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, 1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))

            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph(f"<b>Link table:</b>", styles["Normal"]))
            pdf_content.append(Spacer(1, 12))

            pdf_content.append(table)

        #  Check and add exploit information if available   
        if dv.exploits != []:
            cell_style = getSampleStyleSheet()['Normal']
            cell_style.wordWrap = 'CJK'

            table_data = [["Exploit Name", "Exploit Link"]] 

            for exploit in dv.exploits:
                table_data.append([Paragraph(exploit[0], cell_style), exploit[1]])

            table = LongTable(table_data, colWidths=[200, 300], repeatRows=1) 

            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.royalblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, 1), colors.white),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))

            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph(f"<b>Exploit table:</b>\n", styles["Normal"]))
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(table)
        else:
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph("<b>No exploits exist for the given CVE.</b>\n", styles["Normal"]))

        #  Extract and format affected software versions 
        #BU KOD ISLEMIR
        versions_element = soup.find("div", {"data-testid": "vuln-software-list"})
        if versions_element:
            version_items = versions_element.find_all("span", {"data-testid": "vuln-software-name"})
            affected_versions = [item.text.strip() for item in version_items]
            if affected_versions:
                pdf_content.append(Spacer(1, 12))
                pdf_content.append(Paragraph("<b>Affected Software Versions:</b>", styles["Normal"]))
                for version in affected_versions:
                    pdf_content.append(Paragraph(version, styles["Normal"]))


        #  Build the PDF document
        doc.build(pdf_content)

        print(f"CVE information saved to {pdf_filename}")

    else:
        print(f"Failed to fetch data for CVE ID {input_cve}")
