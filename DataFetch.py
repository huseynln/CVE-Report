import requests
from bs4 import BeautifulSoup
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet

input_cve = input("Enter the CVE-ID: ")
cve_id = input_cve
url = f"https://nvd.nist.gov/vuln/detail/CVE-{cve_id}"

response = requests.get(url)

if response.status_code == 200:
    # Parse the HTML content of the page
    soup = BeautifulSoup(response.text, 'html.parser')

    # Create a PDF document
    pdf_filename = f"CVE-{cve_id}_info.pdf"
    doc = SimpleDocTemplate(pdf_filename, pagesize=letter)
    styles = getSampleStyleSheet()

    # Initialize a list to store PDF content
    pdf_content = []

    # Extract and format CVE information

    header = soup.find(attrs={"data-testid": "page-header-vuln-id"})
    if header:
        header = header.text.strip()
        pdf_content.append(Spacer(1, 12))
        pdf_content.append(Paragraph(f"<font size='16'><b>{header}</b></font>", styles["Normal"]))

    pub_date_element = soup.find("span", {"data-testid": "vuln-published-on"})
    if pub_date_element:
        pub_date_text = pub_date_element.text.strip()
        pdf_content.append(Spacer(1, 12))
        pdf_content.append(Paragraph(f"<b>Publication Date:</b> {pub_date_text}", styles["Normal"]))
    
    base_score = soup.find(attrs={"id":"Cvss3NistCalculatorAnchor"})
    if base_score:
        base_score = base_score.text.strip()
        pdf_content.append(Spacer(1, 12))
        pdf_content.append(Paragraph(f"<b>CVSS Score:</b> {base_score}", styles["Normal"]))

    cvss_element = soup.find(attrs={"data-testid":"vuln-cvss3-nist-vector"})
    if cvss_element:
        cvss_text = cvss_element.text.strip()
        pdf_content.append(Spacer(1, 12))
        pdf_content.append(Paragraph(f"<b>CVSS Vector :</b> {cvss_text}", styles["Normal"]))

    description_element = soup.find("p", {"data-testid": "vuln-description"})
    if description_element:
        description_text = description_element.text.strip()
        pdf_content.append(Spacer(1, 12))
        pdf_content.append(Paragraph(f"<b>Description:</b> {description_text}", styles["Normal"]))
    
    link_table = soup.find('table', {'data-testid': 'vuln-hyperlinks-table'})
    if link_table:
        description_text = link_table.text.strip()
        pdf_content.append(Spacer(1, 12))
        pdf_content.append(Paragraph(f"<b>Link table:</b> {link_table}", styles["Normal"]))

    versions_element = soup.find("div", {"data-testid": "vuln-software-list"})
    if versions_element:
        version_items = versions_element.find_all("span", {"data-testid": "vuln-software-name"})
        affected_versions = [item.text.strip() for item in version_items]
        if affected_versions:
            pdf_content.append(Spacer(1, 12))
            pdf_content.append(Paragraph("<b>Affected Software Versions:</b>", styles["Normal"]))
            for version in affected_versions:
                pdf_content.append(Paragraph(version, styles["Normal"]))

    # Build the PDF document
    doc.build(pdf_content)

    print(f"CVE information saved to {pdf_filename}")

else:
    print(f"Failed to fetch data for CVE ID {cve_id}")