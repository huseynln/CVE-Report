from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time, os
import subprocess
from DataFetch import ExportPdf

def DownloadFromChrome(download_link):
    try:
        subprocess.run(f"start {download_link}", shell=True, text=True)
    except Exception as e:
        print("Problem occured with Chrome testing:", str(e))

def DownloadAnyExploit(download_url):
    opts = Options()
    downloads_folder = os.path.join(os.path.expandvars("%USERPROFILE%"), "Desktop")
    prefs = {
        'download.default_directory': downloads_folder,
        'download.prompt_for_download': False,
        'download.extensions_to_open': 'rb,eml',  
        'safebrowsing.enabled': True
    }
    opts.add_experimental_option('prefs', prefs)

    driver = webdriver.Chrome(options=opts)
    driver.get(download_url)
    time.sleep(5)

def RunExploitDbSelenium(search_query):
    opts = Options()
    downloads_folder = os.path.join(os.path.expandvars("%USERPROFILE%"), "Desktop")
    prefs = {
        'download.default_directory': downloads_folder,
        'download.prompt_for_download': False,
        'download.extensions_to_open': 'rb,eml',  
        'safebrowsing.enabled': True
    }
    opts.add_experimental_option('prefs', prefs)

    driver = webdriver.Chrome(options=opts)
    driver.get(f"https://www.exploit-db.com/search?cve={search_query}")

    time.sleep(2)

    download_links = driver.find_elements(By.XPATH, '//table[@id="exploits-table"]/tbody//a[@href and contains(@href, "/download/")]')

    exploit_db_links = []

    if download_links:
        for link in download_links:
            href_link = link.get_attribute('href')
            exploit_db_links.append(href_link)

    if exploit_db_links:
        for download_link in exploit_db_links:
            DownloadFromChrome(download_link)
    else:
        print("No exploits found for the given CVE.")

input_cve = input("Enter the CVE (e.g., CVE-2021-12345): ")
RunExploitDbSelenium(input_cve)

ExportPdf(input_cve)
